#!/usr/bin/env bash

export PATH="/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/usr/games"
SAVED_CONF_FILE="/etc/ap-or-client.conf"
CONF_FILE="/tmp/ap-or-client.conf"
SCRIPT_NAME="ap-or-client"
WPA_CONF="/etc/wpa_supplicant/wpa_supplicant.conf"
WPA_CONF_CLIENT="${WPA_CONF}-client"
WIFI_NIC="wlan0"
NET_INFS="/etc/network/interfaces"

IWLIST_OUTPUT="$(mktemp)"
SSID_LIST="$(mktemp)"
SSID_AVAILABLE_LIST="$(mktemp)"

# Write to syslog/stderr
function log()
{
	logger -s -t "[${SCRIPT_NAME}]" "${1}"
}

# Control blink(1)
function blink1-ctl()
{
	killall -9 blink1-tool &> /dev/null

	case "${1}" in
		scan)
			blink1-tool --red           -t 0 --chase=0,1,9  &> /dev/null &
			;;
		config) # Orange
			blink1-tool --rgb=255,130,0 -t 0 --chase=0,1,12 &> /dev/null &
			;;
		ap)
			blink1-tool --green         -t 0 --chase=0,1,24 &> /dev/null &
			;;
		client)
			blink1-tool --blue          -t 0 --chase=0,1,24 &> /dev/null &
			;;
	esac
}

log "Run start."

# To save on SD card writes
if [[ ! -s "${CONF_FILE}" ]]; then
	log "Populating conf file at '${CONF_FILE}'"
	cp ${SAVED_CONF_FILE} ${CONF_FILE}
fi

# Check status of a couple things
HOSTAPD_STATUS="$(systemctl status hostapd &> /dev/null; echo ${?})"
DNSMASQ_STATUS="$(systemctl status dnsmasq &> /dev/null; echo ${?})"
WIRED_LINK="$(ethtool eth0 | awk -F ': ' '/Link detected/ {print $2}')"
log "Wired link: ${WIRED_LINK}"

if [[ "${WIRED_LINK}" == "yes" ]]; then
	log "Wired link detected - bringing down wlan0."
	ifdown wlan0
	exit 0
else

	CURRENT_MODE=$(awk -F '=' '/CURRENT_MODE/ {print $2}' ${CONF_FILE})
	log "Current mode: ${CURRENT_MODE}"

	awk -F '=' '/ssid/ {print $2}' ${WPA_CONF_CLIENT} | sed "s/'//g" | sed 's/"//g' > ${SSID_LIST} 
	SSID_TOTAL=$(cat ${SSID_LIST} | wc -l)

	# Turn blink(1) red
	blink1-ctl scan

	# Execute custom iwlist scan
	log "Scanning for known APs."
	iwlist ${WIFI_NIC} scan | grep -oE 'ESSID:".*."|Quality=..' | sed -e 's/ESSID://g' -e 's/"//g' -e 's/Quality=//g' > ${IWLIST_OUTPUT}

	ODD="1"
	while read LINE; do
		if [[ "${ODD}" == "1" ]]; then
			ODD="0"
			QUALITY="${LINE}"
		else
			SSID="${LINE}"
			ODD="1"

			echo "SSID: ${SSID} QUALITY: ${QUALITY}"

			# Only output SSIDs with quality greater than 40
			if [[ "${QUALITY}" -ge "40" ]]; then
				echo "${SSID}" >> ${SSID_AVAILABLE_LIST}
			fi
		fi
	done < ${IWLIST_OUTPUT}

	while read SSID; do
		log "Scanning for SSID '${SSID}'."
		grep -q "${SSID}" "${IWLIST_OUTPUT}"
		SCAN_RESULT="${?}"
		SSID_TOTAL=$((SSID_TOTAL-SCAN_RESULT))
		#echo "[${SSID}] SCAN_RESULT: ${SCAN_RESULT} | SSID_TOTAL: ${SSID_TOTAL}"
	done < ${SSID_LIST} 

	# Delete temp files
	rm -f ${SSID_LIST}
	rm -f ${SSID_AVAILABLE_LIST}
	rm -f ${IWLIST_OUTPUT}

	if [[ "${SSID_TOTAL}" != "0" ]]; then
		# Connectable AP found
		log "Connectable AP found."

		if [[ "${CURRENT_MODE}" != "CLIENT" ]]; then
			log "Changing to CLIENT mode."

			log "Updating wpa_supplicant."
			cp ${WPA_CONF_CLIENT} ${WPA_CONF}
			sleep 1

			echo "CURRENT_MODE=CLIENT" > ${CONF_FILE}

			log "Changing ${NET_INFS} config."
			rm -f  ${NET_INFS} 
			ln -fs ${NET_INFS}-client ${NET_INFS} 

			# Turn blink(1) yellow
			blink1-ctl config

			log "Cycling ${WIFI_NIC}."
			ifdown ${WIFI_NIC} &> /dev/null
			sleep 1
			ifup   ${WIFI_NIC} &> /dev/null
		else
			log "Staying in CLIENT mode."
		fi

		# Stop hostapd and dnsmasq if they are running
		if [[ "${HOSTAPD_STATUS}" != "3" ]]; then
			log "Stopping hostapd."
			systemctl stop hostapd &> /dev/null
			sleep 1
		fi

		if [[ "${DNSMASQ_STATUS}" != "3" ]]; then
			log "Stopping dnsmasq."
			systemctl stop dnsmasq &> /dev/null
			sleep 1
		fi

		# Turn blink(1) blue
		blink1-ctl client
	else
		log "No connectable APs found."

		if [[ "${CURRENT_MODE}" != "AP" ]]; then
			log "Changing to AP mode."

			log "Updating wpa_supplicant."
			rm -f ${WPA_CONF}
			touch ${WPA_CONF}
			sleep 1

			echo "CURRENT_MODE=AP" > ${CONF_FILE}

			log "Changing ${NET_INFS} config."
			rm -f  ${NET_INFS}
			ln -fs ${NET_INFS}-ap ${NET_INFS}

			# Turn blink(1) yellow
			blink1-ctl config

			log "Cycling ${WIFI_NIC}."
			ifdown ${WIFI_NIC} &> /dev/null
			sleep 1
			ifup   ${WIFI_NIC} &> /dev/null
		else
			log "Staying in AP mode."
		fi

		# Start hostapd and dnsmasq if they are stopped
		if [[ "${HOSTAPD_STATUS}" != "0" ]]; then
			log "Starting hostapd."
			systemctl start hostapd &> /dev/null
			sleep 1
		fi

		if [[ "${DNSMASQ_STATUS}" != "0" ]]; then
			log "Starting dnsmasq."
			systemctl start dnsmasq &> /dev/null
			sleep 1
		fi

		# Turn blink(1) green
		blink1-ctl ap
	fi
fi

log "Run complete."
